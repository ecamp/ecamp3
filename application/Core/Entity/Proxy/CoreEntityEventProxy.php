<?php

namespace Core\Entity\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CoreEntityEventProxy extends \Core\Entity\Event implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setTitle($title)
    {
        $this->_load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->_load();
        return parent::getTitle();
    }

    public function setCamp(\Core\Entity\Camp $camp)
    {
        $this->_load();
        return parent::setCamp($camp);
    }

    public function getCamp()
    {
        $this->_load();
        return parent::getCamp();
    }

    public function setUser(\Core\Entity\User $user)
    {
        $this->_load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->_load();
        return parent::getUser();
    }

    public function getEventInstances()
    {
        $this->_load();
        return parent::getEventInstances();
    }

    public function getPlugins()
    {
        $this->_load();
        return parent::getPlugins();
    }

    public function PrePersist()
    {
        $this->_load();
        return parent::PrePersist();
    }

    public function PreUpdate()
    {
        $this->_load();
        return parent::PreUpdate();
    }

    public function getUpdatedAt()
    {
        $this->_load();
        return parent::getUpdatedAt();
    }

    public function getCreatedAt()
    {
        $this->_load();
        return parent::getCreatedAt();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'createdAt', 'updatedAt', 'id', 'title', 'camp', 'user', 'eventInstances', 'plugins');
    }
}