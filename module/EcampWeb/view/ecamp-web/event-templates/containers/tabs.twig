<div class="tabbable eventTemplateContainer" id="{{ eventTemplateContainer.id }}">
	<ul class="nav nav-tabs">

		<div class="btn-group pull-right" style="margin-right: 5px;">
			<button class="createEventPlugin btn btn-xs btn-success"
					style="margin-top:3px; height: 25px; padding: 2px 8px">
				<i class="fa fa-plus"></i> Add Plugin
			</button>
		</div>
	</ul>

	<div class="tab-content">
		{% for childViewModel in childViewModels %}
			{% RenderViewModel childViewModel %}
		{% endfor %}
	</div>
</div>

<script type="text/javascript">
	$(function(){
		var createUrl = "{{ url('web/plugin-create', { 'eventId': event.id, 'pluginId': plugin.id }) }}";
		var deleteUrl = "{{ url('web/plugin-delete', { 'eventPluginId': '' }) }}";

		var tabbable = $("div#{{ eventTemplateContainer.id }}.eventTemplateContainer");
		var tabContent = tabbable.find('div.tab-content');
		var ulNavTabs = tabbable.find('ul.nav-tabs');
		ulNavTabs.find('button.createEventPlugin').click(createEventPlugin);

		function updateNavTabs(){
			ulNavTabs.find('li').remove();
			var tabPanes = tabContent.find('.tab-pane');
			var activePaneId = tabPanes.filter('.active').attr('id');
			var canDelete = getCurrentNumEventPlugin() > getMinNumEventPlugin();
			var canCreate = getCurrentNumEventPlugin() < getMaxNumEventPlugin();

			if(canCreate){
				ulNavTabs.find('button.createEventPlugin').show();
			} else {
				ulNavTabs.find('button.createEventPlugin').hide();
			}

			if(tabPanes.length > 0){
				tabbable.show();
				tabPanes.each(function(idx, item){
					var tabPane = $(item);
					var paneId = tabPane.attr('id');
					var li = tabPane.find('.nav-tabs-li li');
					var liClone = li.clone();

					if(canDelete){ liClone.find('button').addClass('showDeleteButton'); }
					liClone.find('button').click(function(){ deleteEventPlugin(paneId); });

					if(idx == 0 && activePaneId == undefined){
						tabPane.addClass('active');
						liClone.addClass('active');
					}
					if(paneId == activePaneId){
						liClone.addClass('active');
					}
					$(ulNavTabs).append(liClone);
				});
			} else {
				tabbable.hide();
			}
		}

		function createEventPlugin(){
			$.get(createUrl).done(function(data){
				tabContent.append($(data));
				updateNavTabs();
			});
		}

		function deleteEventPlugin(id){
			$.get(deleteUrl + id).done(function(){
				tabContent.find('#' + id + '.tab-pane').remove();
				updateNavTabs();
			});
		}

		function getMinNumEventPlugin(){
			return {{ eventTypePlugin.minNumberPluginInstances }};
		}

		function getMaxNumEventPlugin(){
			return {{ eventTypePlugin.maxNumberPluginInstances }};
		}

		function getCurrentNumEventPlugin(){
			return tabContent.find('.tab-pane').length;
		}

		tabbable.data('$eventTemplateContainerController', {
			'getMinNumEventPlugin': getMinNumEventPlugin,
			'getMaxNumEventPlugin': getMaxNumEventPlugin,
			'getCurrentNumEventPlugin': getCurrentNumEventPlugin,

			'createEventPlugin': createEventPlugin,
			'deleteEventPlugin': deleteEventPlugin
		});

		updateNavTabs();
	});
</script>
