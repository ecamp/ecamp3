name: '[reusable only] e2e tests run'

on:
  workflow_call:
    inputs:
      run-identifier:
        required: false
        type: string

jobs:
  e2e-tests-run:
    name: 'Tests: End-to-end'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DB_CPU_LIMIT: 4
    strategy:
      fail-fast: false
      matrix:
        browser:
          - chrome
          - firefox
          - edge
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

      - run: cp .env.ci .env

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore tmp folder
        uses: actions/download-artifact@v4
        with:
          name: e2e-tests-images
          path: /tmp

      - name: Load images
        run: |
          docker load --input /tmp/ecamp3-dev-api.tar
          docker image ls -a --digests

      - name: Restore cache volumes (npm, composer)
        uses: actions/cache@3624ceb22c1c5a301c8db4169662070a689d9ea8 # v4
        with:
          path: .cache
          key: docker-compose-${{ hashFiles('frontend/package-lock.json', 'print/package-lock.json', 'api/composer.lock') }}-${{ matrix.browser }}
          restore-keys: |
            docker-compose-
            
      - run: |
          jwt_passphrase=${JWT_PASSPHRASE:-$(grep ''^JWT_PASSPHRASE='' .env | cut -f 2 -d ''='')}
          echo "Generating public / private keys for JWT"
          mkdir -p config/jwt
          echo "$jwt_passphrase" | openssl genpkey -out config/jwt/private.pem -pass stdin -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096
          echo "$jwt_passphrase" | openssl pkey -in config/jwt/private.pem -passin stdin -out config/jwt/public.pem -pubout
          setfacl -R -m u:www-data:rX -m u:"$(whoami)":rwX config/jwt
          setfacl -dR -m u:www-data:rX -m u:"$(whoami)":rwX config/jwt
        working-directory: api

      - run: docker compose up --wait -d database
        
      - run: docker compose -f docker-compose.yml run --rm api migrate-database

      # start necessary containers
      - run: docker compose -f docker-compose.yml up -d api frontend pdf print browserless database docker-host http-cache mail reverse-proxy

      # pull cypress while container are starting up
      - run: docker compose pull e2e

      - run: sh -x wait-for-container-startup.sh

      - run: docker compose --profile e2e run --rm e2e --browser ${{ matrix.browser }}

      - run: sudo chown -R $USER e2e
        if: always()

      # store screenshots and videos on GitHub as artifacts, for downloading and debugging in case of problems
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-output-${{ matrix.browser }}${{ inputs.run-identifier != null && format('-{0}', inputs.run-identifier) }}
          path: |
            e2e/data/**/*

      # print running containers
      - run: docker ps -a
        if: always()

      # print docker container logs (good for debugging; can be disabled again later on)
      - run: docker compose logs --tail="all"
        if: always()
