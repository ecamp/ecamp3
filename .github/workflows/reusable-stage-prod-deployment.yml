name: '[reusable only] Staging and Prod deployment '

on:
  workflow_call:
    inputs:
      restoreSourceFile:
        type: string
        required: false

jobs:
  upgrade-or-install-deployment:
    name: Upgrade or install deployment
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    env:
      environment: ${{ github.ref_name }}
      domain: ${{ vars.SUBDOMAIN }}.${{ vars.DOMAIN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Create a pending GitHub deployment
        uses: bobheadxi/deployments@v1.5.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          env: ${{ env.environment }}

      - name: Upgrade or install helm release
        run: |
          # Setup authentication
          mkdir ~/.kube && echo '${{ secrets.KUBECONFIG }}' > ~/.kube/config && chmod go-r ~/.kube/config
          # Switch to the helm chart directory
          cd .helm/ecamp3
          # Install dependency charts
          helm dependency update
          # Set the appVersion, workaround from https://github.com/helm/helm/issues/8194 so that we can
          # later find out which deployments need to be upgraded
          sed -i 's/^appVersion:.*$/appVersion: "${{ github.sha }}"/' Chart.yaml
          # Install or upgrade the release
          helm upgrade --install ecamp3-${{ env.environment }} . \
            --set imageTag=${{ github.sha }} \
            --set frontend.image.repository='docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ecamp3-frontend' \
            --set print.image.repository='docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ecamp3-print' \
            --set api.image.repository='docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ecamp3-api' \
            --set apiCache.image.repository='docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ecamp3-varnish' \
            --set postgresql.dbBackupRestoreImage.repository='docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ecamp3-db-backup-restore' \
            --set termsOfServiceLinkTemplate='https://ecamp3.ch/{lang}/tos' \
            --set newsLink='https://ecamp3.ch/blog' \
            --set helpLink='https://ecamp3.ch/faq' \
            --set domain=${{ env.domain }} \
            --set ingress.basicAuth.enabled=${{ vars.BASIC_AUTH_ENABLED || false  }} \
            --set ingress.basicAuth.username=${{ secrets.BASIC_AUTH_USERNAME }} \
            --set ingress.basicAuth.password='${{ secrets.BASIC_AUTH_PASSWORD }}' \
            --set apiCache.enabled=${{ vars.API_CACHE_ENABLED || false }} \
            --set mail.dsn=${{ secrets.MAILER_DSN }} \
            --set postgresql.url='${{ secrets.POSTGRES_URL }}/${{ secrets.DB_NAME }}?sslmode=require' \
            --set postgresql.dropDBOnUninstall=false \
            --set postgresql.backup.schedule=${{ vars.BACKUP_SCHEDULE != null && format('''{0}''', vars.BACKUP_SCHEDULE) || null }} \
            --set postgresql.backup.s3.endpoint='${{ vars.BACKUP_S3_ENDPOINT }}' \
            --set postgresql.backup.s3.bucket='${{ vars.BACKUP_S3_BUCKET }}' \
            --set postgresql.backup.s3.accessKeyId='${{ secrets.BACKUP_S3_ACCESS_KEY_ID }}' \
            --set postgresql.backup.s3.accessKey='${{ secrets.BACKUP_S3_ACCESS_KEY }}' \
            --set postgresql.backup.encryptionKey=${{ secrets.BACKUP_ENCRYPTION_KEY != null && format('''{0}''', secrets.BACKUP_ENCRYPTION_KEY) || null }} \
            --set postgresql.restore.sourceFile=${{ inputs.restoreSourceFile != null && format('''{0}''', inputs.restoreSourceFile) || null }} \
            --set postgresql.restore.sourceAppName=${{ vars.RESTORE_SOURCE_APP != null && format('''{0}''', vars.RESTORE_SOURCE_APP) || null }} \
            --set postgresql.restore.s3.endpoint='${{ vars.RESTORE_S3_ENDPOINT }}' \
            --set postgresql.restore.s3.bucket='${{ vars.RESTORE_S3_BUCKET }}' \
            --set postgresql.restore.s3.accessKeyId='${{ secrets.RESTORE_S3_ACCESS_KEY_ID }}' \
            --set postgresql.restore.s3.accessKey='${{ secrets.RESTORE_S3_ACCESS_KEY }}' \
            --set postgresql.restore.encryptionKey=${{ secrets.RESTORE_ENCRYPTION_KEY != null && format('''{0}''', secrets.RESTORE_ENCRYPTION_KEY) || null }} \
            --set postgresql.restore.inviteSupportAccountToInterestingCamps=${{ vars.RESTORE_INVITE_TO_INTERESTING_CAMPS != null && format('''{0}''', vars.RESTORE_INVITE_TO_INTERESTING_CAMPS) || false }} \
            --set api.dataMigrationsDir='${{ vars.DATA_MIGRATIONS_DIR }}' \
            --set api.appSecret='${{ secrets.API_APP_SECRET }}' \
            --set api.sentryDsn='${{ secrets.API_SENTRY_DSN }}' \
            --set api.jwt.passphrase='${{ secrets.JWT_PASSPHRASE }}' \
            --set api.jwt.publicKey='${{ secrets.JWT_PUBLIC_KEY }}' \
            --set api.jwt.privateKey='${{ secrets.JWT_PRIVATE_KEY }}' \
            --set api.oauth.google.clientId='${{ secrets.OAUTH_GOOGLE_CLIENT_ID }}' \
            --set api.oauth.google.clientSecret='${{ secrets.OAUTH_GOOGLE_CLIENT_SECRET }}' \
            --set api.oauth.pbsmidata.clientId='${{ secrets.OAUTH_PBSMIDATA_CLIENT_ID }}' \
            --set api.oauth.pbsmidata.clientSecret='${{ secrets.OAUTH_PBSMIDATA_CLIENT_SECRET }}' \
            --set api.oauth.pbsmidata.baseUrl='${{ secrets.OAUTH_PBSMIDATA_BASE_URL }}' \
            --set api.oauth.cevidb.clientId='${{ secrets.OAUTH_CEVIDB_CLIENT_ID }}' \
            --set api.oauth.cevidb.clientSecret='${{ secrets.OAUTH_CEVIDB_CLIENT_SECRET }}' \
            --set api.oauth.cevidb.baseUrl='${{ secrets.OAUTH_CEVIDB_BASE_URL }}' \
            --set api.oauth.jubladb.clientId='${{ secrets.OAUTH_JUBLADB_CLIENT_ID }}' \
            --set api.oauth.jubladb.clientSecret='${{ secrets.OAUTH_JUBLADB_CLIENT_SECRET }}' \
            --set api.oauth.jubladb.baseUrl='${{ secrets.OAUTH_JUBLADB_BASE_URL }}' \
            --set frontend.sentryDsn='${{ secrets.FRONTEND_SENTRY_DSN }}' \
            --set print.sentryDsn='${{ secrets.PRINT_SENTRY_DSN }}' \
            --set print.ingress.readTimeoutSeconds='${{ vars.PRINT_INGRESS_READ_TIMEOUT_SECONDS }}' \
            --set print.renderHTMLTimeoutMs='${{ vars.PRINT_RENDER_HTML_TIMEOUT_MS }}' \
            --set print.renderPDFTimeoutMs='${{ vars.PRINT_RENDER_PDF_TIMEOUT_MS }}' \
            --set deploymentTime="$(date -u +%s)" \
            --set deployedVersion="$(git rev-parse --short HEAD)" \
            --set recaptcha.siteKey='${{ secrets.RECAPTCHA_SITE_KEY }}' \
            --set recaptcha.secret='${{ secrets.RECAPTCHA_SECRET }}' \
            --set frontend.loginInfoTextKey=${{ vars.LOGIN_INFO_TEXT_KEY }} \
            --set browserless.maxConcurrentSessions=${{ vars.BROWSERLESS_MAXCONCURRENTSESSIONS || 3 }} \
            --set browserless.maxQueueLength=${{ vars.BROWSERLESS_MAXQUEUELENGTH || 9 }} \
            --set browserless.connectionTimeout=${{ vars.BROWSERLESS_CONNECTION_TIMEOUT_MS || '30000' }} \
            --set browserless.resources.requests.cpu=${{ vars.BROWSERLESS_CPU || '500m' }} \
            --set browserless.resources.requests.memory=${{ vars.BROWSERLESS_MEMORY || '800Mi' }} \
            --set api.resources.requests.cpu=${{ vars.PHP_CPU || '1000m' }} \
            --set api.resources.requests.memory=${{ vars.PHP_MEMORY || '500Mi' }} \
            --set api.resources.limits.cpu=${{ vars.PHP_CPULIMIT || '1900m' }} \
            --set frontend.resources.requests.cpu=50m \
            --set print.resources.requests.cpu=${{ vars.PRINT_CPU || '300m' }} \
            --set print.resources.requests.memory=${{ vars.PRINT_MEMORY || '150Mi' }} \
            --set autoscaling.enabled=true \
            --set autoscaling.targetCPUUtilizationPercentage=90

      - name: Finish the GitHub deployment
        uses: bobheadxi/deployments@v1.5.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ env.domain }}
          env: ${{ steps.deployment.outputs.env }}
