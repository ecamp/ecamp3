name: Deploy alpha, staging or prod

on:
  repository_dispatch:
    types: [ ci-passed ]
  workflow_dispatch:       # Allow triggering manually
    inputs:
      confirmDeployWithoutCI:
        description: 'I confirm that I want to deploy to ALPHA without running CI on the alpha branch first.'
        required: true
        type: boolean

jobs:
  determine-environment:
    name: Determine environment
    if: ${{
      (inputs.confirmDeployWithoutCI == true)
      || (github.event.client_payload.ref == 'refs/heads/alpha')
      || (github.event.client_payload.ref == 'refs/heads/staging')
      || (github.event.client_payload.ref == 'refs/heads/prod')
      }}
    outputs:
      environment: ${{ steps.get-branch-name.outputs.result }}
    runs-on: ubuntu-latest
    steps:

      - uses: actions/github-script@v6
        id: get-branch-name
        with:
          result-encoding: string
          script: |
            return context.payload.ref.replace('refs/heads/', '')
  

  upgrade-or-install-deployment:
    name: Upgrade or install deployment
    needs:
      determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    env:
      environment: ${{ needs.determine-environment.outputs.environment }}
      domain: ${{ vars.DOMAIN_SUFFIX }}.${{ vars.DOMAIN }}
    steps:

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3

      - name: log environment
        id: log-environment
        run: |
          REF=$(git rev-parse HEAD)
          echo "Git SHA: $REF"
          echo "sha=$REF" | tr -d "\n" >> $GITHUB_OUTPUT

          echo "github: ${{ toJSON(github) }}"
          echo ""
          echo "inputs: ${{ toJSON(inputs) }}"
          echo ""
          echo "job: ${{ toJSON(job) }}"
          echo ""
          echo "needs: ${{ toJSON(needs) }}"
          echo ""
          echo "env: ${{ toJSON(env) }}"
          echo ""
          echo "vars: ${{ toJSON(vars) }}"
          echo ""
          echo "secrets:"
          cat <<-HEREDOC
            ${{ toJSON(secrets) }}
          HEREDOC

      - name: Create a pending GitHub deployment
        uses: bobheadxi/deployments@v1.4.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          env: ${{ env.environment }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push frontend docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          file: .docker-hub/frontend/Dockerfile
          tags: ecamp/ecamp3-frontend:${{ env.environment }},ecamp/ecamp3-frontend:${{ steps.log-environment.outputs.sha }}
          context: .
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,scope=frontend,mode=max

      - name: Build and push api docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          file: api/Dockerfile
          tags: ecamp/ecamp3-api:${{ env.environment }},ecamp/ecamp3-api:${{ steps.log-environment.outputs.sha }}
          context: './api'
          target: api_platform_php
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Build and push caddy docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          file: api/Dockerfile
          tags: ecamp/ecamp3-caddy:${{ env.environment }},ecamp/ecamp3-caddy:${{ steps.log-environment.outputs.sha }}
          context: './api'
          target: api_platform_caddy_prod
          cache-from: type=gha,scope=caddy
          cache-to: type=gha,scope=caddy,mode=max

      - name: Build and push print docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          file: .docker-hub/print/Dockerfile
          tags: ecamp/ecamp3-print:${{ env.environment }},ecamp/ecamp3-print:${{ steps.log-environment.outputs.sha }}
          context: .
          cache-from: type=gha,scope=print
          cache-to: type=gha,scope=print,mode=max

      - name: Upgrade or install helm release
        run: |
          # Setup authentication
          mkdir ~/.kube && echo '${{ secrets.KUBECONFIG }}' > ~/.kube/config && chmod go-r ~/.kube/config
          # Switch to the helm chart directory
          cd .helm/ecamp3
          # Install dependency charts
          helm dependency update
          # Set the appVersion, workaround from https://github.com/helm/helm/issues/8194 so that we can
          # later find out which deployments need to be upgraded
          sed -i 's/^appVersion:.*$/appVersion: "${{ steps.git-ref.outputs.sha }}"/' Chart.yaml
          # Install or upgrade the release
          helm upgrade --install ecamp3-${{ env.environment }} . \
            --set imageTag=${{ steps.log-environment.outputs.sha }} \
            --set termsOfServiceLinkTemplate='https://ecamp3.ch/{lang}/tos' \
            --set domain=${{ env.domain }} \
            --set mail.dsn=${{ secrets.MAILER_DSN }} \
            --set postgresql.enabled=false \
            --set postgresql.url='${{ secrets.POSTGRES_URL }}/${{ secrets.DB_NAME }}?sslmode=require' \
            --set postgresql.dropDBOnUninstall=false \
            --set php.dataMigrationsDir='${{ vars.DATA_MIGRATIONS_DIR }}' \
            --set php.appSecret='${{ secrets.API_APP_SECRET }}' \
            --set php.sentryDsn='${{ secrets.API_SENTRY_DSN }}' \
            --set php.jwt.passphrase='${{ secrets.JWT_PASSPHRASE }}' \
            --set php.jwt.publicKey='${{ secrets.JWT_PUBLIC_KEY }}' \
            --set php.jwt.privateKey='${{ secrets.JWT_PRIVATE_KEY }}' \
            --set php.oauth.google.clientId='${{ secrets.OAUTH_GOOGLE_CLIENT_ID }}' \
            --set php.oauth.google.clientSecret='${{ secrets.OAUTH_GOOGLE_CLIENT_SECRET }}' \
            --set php.oauth.pbsmidata.clientId='${{ secrets.OAUTH_PBSMIDATA_CLIENT_ID }}' \
            --set php.oauth.pbsmidata.clientSecret='${{ secrets.OAUTH_PBSMIDATA_CLIENT_SECRET }}' \
            --set php.oauth.pbsmidata.baseUrl='${{ secrets.OAUTH_PBSMIDATA_BASE_URL }}' \
            --set php.oauth.cevidb.clientId='${{ secrets.OAUTH_CEVIDB_CLIENT_ID }}' \
            --set php.oauth.cevidb.clientSecret='${{ secrets.OAUTH_CEVIDB_CLIENT_SECRET }}' \
            --set php.oauth.cevidb.baseUrl='${{ secrets.OAUTH_CEVIDB_BASE_URL }}' \
            --set php.oauth.jubladb.clientId='${{ secrets.OAUTH_JUBLADB_CLIENT_ID }}' \
            --set php.oauth.jubladb.clientSecret='${{ secrets.OAUTH_JUBLADB_CLIENT_SECRET }}' \
            --set php.oauth.jubladb.baseUrl='${{ secrets.OAUTH_JUBLADB_BASE_URL }}' \
            --set browserless.maxConcurrentSessions=3 \
            --set browserless.maxQueueLength=9 \
            --set frontend.sentryDsn='${{ secrets.FRONTEND_SENTRY_DSN }}' \
            --set print.sentryDsn='${{ secrets.PRINT_SENTRY_DSN }}' \
            --set deploymentTime="$(date -u +%s)" \
            --set deployedVersion="$(git rev-parse --short '${{ steps.git-ref.outputs.sha }}')" \
            --set recaptcha.siteKey='${{ secrets.RECAPTCHA_SITE_KEY }}' \
            --set recaptcha.secret='${{ secrets.RECAPTCHA_SECRET }}' \
            --set coupon.secret='${{ secrets.COUPON_SECRET }}' \
            --set frontend.loginInfoTextKey=${{ vars.LOGIN_INFO_TEXT_KEY }}

      - name: Finish the GitHub deployment
        uses: bobheadxi/deployments@v1.4.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ env.domain }}
          env: ${{ steps.deployment.outputs.env }}
